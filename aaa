#include <iostream>

typedef struct tree {
	int n;
	tree* l;
	tree* r;
};

void inorder(tree *t)
{
	if (t == NULL)
		return;

	inorder(t->l);
	if(t->n == '+')
		std::cout << "+ ";
	if (t->n == '*')
		std::cout << "* ";
	if (t->n == '-')
		std::cout << "- ";
	if (t->n < 40)
	std::cout << t->n << " ";
	inorder(t->r);
}

int eval(tree* t)
{
	int a, b;
	if (t == NULL)
		return 0;

	if (t->r == NULL)
		return t->n;

	a = eval(t->l);
	b = eval(t->r);

	if (t->n == '+')
		return a + b;

	if (t->n == '*')
		return a * b;

	if (t->n == '-')
		return a - b;
}

int getMax(tree* t)
{
	/*
	int a = 0; int b = 0;

	if (t->l == 0 && t->r == 0)
		return t->n;

	if (t->l != 0)
		a = getMax(t->l);

	if (t->r != 0)
		b = getMax(t->r);

	if (a > b)
		return a > t->n ? a : t->n;
	return b > t->n ? b :t->n;
	*/

	if (t == 0)
		return 0;

	int a = getMax(t->l);
	int b = getMax(t->r);

	if (a > b)
		return a > t->n ? a : t->n;
	return b > t->n ? b : t->n;
}


int main()
{
	//tree t1, t2, t3, t4, t5, t6, t7;
	//t1.n = '+';
	//t1.l = &t2;
	//t1.r = &t3;

	//t2.n = '-';
	//t2.l = &t4;
	//t2.r = &t5;

	//t4.n = 1;

	//t5.n = '*';
	//t5.l = &t6;
	//t5.r = &t7;

	//t7.n = 3;
	//t6.n = 2;
	//t3.n = 4;
	//tree *t = &t1;
	//std::cout << eval(t);

	struct tree* t, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;

	t = &t0;
	t0.n = 34;
	t1.n = 12;
	t2.n = 52;
	t3.n = 18;
	t4.n = 21;
	t5.n = 65;
	t6.n = 47;
	t7.n = 73;
	t8.n = 12;
	t9.n = 16;
	t10.n = 15;
	t0.l = &t1;
	t0.r = &t5;
	t1.l = &t2;
	t1.r = &t3;
	t2.l = 0;
	t2.r = 0;
	t3.l = &t4;
	t3.r = 0;
	t4.l = 0;
	t4.r = 0;
	t5.l = 0;
	t5.r = &t6;
	t6.l = &t7;
	t6.r = &t9;
	t7.l = &t8;
	t7.r = 0;
	t8.l = 0;
	t8.r = 0;
	t9.l = 0;
	t9.r = &t10;
	t10.l = 0;
	t10.r = 0;
	
	t = &t0;
	std::cout << getMax(t);
}

